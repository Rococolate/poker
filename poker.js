'use strict';

const A = ['1A', '2A', '3A', '4A', '5A', '6A', '7A', '8A', '9A', '10A'];
const B = ['1B', '2B', '3B', '4B', '5B', '6B', '7B', '8B', '9B', '10B'];
const C = ['1C', '2C', '3C', '4C', '5C', '6C', '7C', '8C', '9C', '10C'];
const D = ['1D', '2D', '3D', '4D', '5D', '6D', '7D', '8D', '9D', '10D'];

let answer = [];
let obj = {length:0};
let sy = {};

// 遍历所有可能抽到的组合
A.forEach( a => {
  B.forEach( b => {
    C.forEach( c => {
      D.forEach( d => {
        let res = combination24(a, b, c, d);
        if (!!res) answer.push(res);
      });
    });
  }); 
});

// 排序
console.log(answer.sort());
// 是否有重复
answer.forEach(item => {
  if (obj[item] === undefined) {
    obj[item] = 0;
    obj.length++; 
  } else {
    obj[item] ++;
  }
});
// console.log(obj);
console.log(answer.length);
console.log(obj.length);
console.log(sy);


function syAdd(f){
  let key = f.join(',');
  if (sy[key] === undefined) {
    sy[key] = 0;
  } else {
    sy[key] ++;
  }
}

function combination24 (a, b, c, d) {
  let boolen = false;
  // 组合
  let l1 = [
    [a, b, c, d], [a, b, d, c], [a, c, b, d], [a, c, d, b], [a, d, b, c], [a, d, c, b],
    [b, a, c, d], [b, a, d, c], [b, c, a, d], [b, c, d, a], [b, d, a, c], [b, d, c, a],
    [c, a, b, d], [c, a, d, b], [c, b, a, d], [c, b, d, a], [c, d, a, b], [c, d, b, a],
    [d, a, b, c], [d, a, c, b], [d, b, a, c], [d, b, c, a], [d, c, a, b], [d, c, b, a], 
  ]
  /**/

  let l2 = [ // 单纯

      ['+','+','+'],     ['+','+','-'],   /*['+','+','*'],*/   /*['+','+','/'],*/ 
      ['+','-','+'],   /*['+','-','-'],*/ /*['+','-','*'],*/   /*['+','-','/'],*/
    /*['+','*','+'],*/ /*['+','*','-'],*/ /*['+','*','*'],*/   /*['+','*','/'],*/ 
    /*['+','/','+'],*/ /*['+','/','-'],*/ /*['+','/','*'],*/   /*['+','/','/'],*/ 
      
      ['-','+','+'],   /*['-','+','-'],*/ /*['-','+','*'],*/   /*['-','+','/'],*/ 
    /*['-','-','+'],*/ /*['-','-','-'],*/ /*['-','-','*'],*/   /*['-','-','/'],*/
    /*['-','*','+'],*/ /*['-','*','-'],*/ /*['-','*','*'],*/   /*['-','*','/'],*/
    /*['-','/','+'],*/ /*['-','/','-'],*/ /*['-','/','*'],*/   /*['-','/','/'],*/ 
        
    /*['*','+','+'],*/ /*['*','+','-'],*/ /*['*','+','*'],*/   /*['*','+','/'],*/ 
    /*['*','-','+'],*/ /*['*','-','-'],*/ /*['*','-','*'],*/   /*['*','-','/'],*/
    /*['*','*','+'],*/ /*['*','*','-'],*/   ['*','*','*'],       ['*','*','/'], 
    /*['*','/','+'],*/ /*['*','/','-'],*/   ['*','/','*'],       ['*','/','/'], 
            
    /*['/','+','+'],*/ /*['/','+','-'],*/ /*['/','+','*'],*/   /*['/','+','/'],*/ 
    /*['/','-','+'],*/ /*['/','-','-'],*/ /*['/','-','*'],*/   /*['/','-','/'],*/
    /*['/','*','+'],*/ /*['/','*','-'],*/   ['/','*','*'],       ['/','*','/'],
    /*['/','/','+'],*/ /*['/','/','-'],*/   ['/','/','*'],     /*['/','/','/'],*/ 

  ]

  let l3 = [ // 复合
    /*['+','+','+'],*/ /*['+','+','-'],*/   ['+','+','*'],     /*['+','+','/'],*/ 
    /*['+','-','+'],*/ /*['+','-','-'],*/   ['+','-','*'],     /*['+','-','/'],*/
      ['+','*','+'],     ['+','*','-'],     ['+','*','*'],       ['+','*','/'], 
      ['+','/','+'],   /*['+','/','-'],*/   ['+','/','*'],     /*['+','/','/'],*/ 
            
    /*['-','+','+'],*/ /*['-','+','-'],*/   ['-','+','*'],     /*['-','+','/'],*/ 
    /*['-','-','+'],*/ /*['-','-','-'],*/   ['-','-','*'],     /*['-','-','/'],*/
      ['-','*','+'],     ['-','*','-'],     ['-','*','*'],       ['-','*','/'], 
    /*['-','/','+'],*/ /*['-','/','-'],*/   ['-','/','*'],     /*['-','/','/'],*/ 
        
      ['*','+','+'],     ['*','+','-'],     ['*','+','*'],       ['*','+','/'], 
      ['*','-','+'],     ['*','-','-'],     ['*','-','*'],       ['*','-','/'],
      ['*','*','+'],     ['*','*','-'],   /*['*','*','*'],*/   /*['*','*','/'],*/
      ['*','/','+'],     ['*','/','-'],   /*['*','/','*'],*/   /*['*','/','/'],*/
          
      ['/','+','+'],   /*['/','+','-'],*/   ['/','+','*'],     /*['/','+','/'],*/ 
    /*['/','-','+'],*/ /*['/','-','-'],*/   ['/','-','*'],     /*['/','-','/'],*/
      ['/','*','+'],     ['/','*','-'],   /*['/','*','*'],*/   /*['/','*','/'],*/
    /*['/','/','+'],*/ /*['/','/','-'],*/ /*['/','/','*'],*/   /*['/','/','/'],*/ 
  ]

  let l4 = [ // 结合
    /*['+','+','+'],*/ /*['+','+','-'],*/ /*['+','+','*'],*/   /*['+','+','/'],*/ 
    /*['+','-','+'],*/ /*['+','-','-'],*/ /*['+','-','*'],*/   /*['+','-','/'],*/
      ['+','*','+'],     ['+','*','-'],   /*['+','*','*'],*/   /*['+','*','/'],*/
    /*['+','/','+'],*/ /*['+','/','-'],*/ /*['+','/','*'],*/   /*['+','/','/'],*/ 
            
    /*['-','+','+'],*/ /*['-','+','-'],*/ /*['-','+','*'],*/   /*['-','+','/'],*/ 
    /*['-','-','+'],*/ /*['-','-','-'],*/ /*['-','-','*'],*/   /*['-','-','/'],*/
      ['-','*','+'],     ['-','*','-'],   /*['-','*','*'],*/   /*['-','*','/'],*/
    /*['-','/','+'],*/ /*['-','/','-'],*/ /*['-','/','*'],*/   /*['-','/','/'],*/ 
        
    /*['*','+','+'],*/ /*['*','+','-'],*/   ['*','+','*'],     /*['*','+','/'],*/ 
    /*['*','-','+'],*/ /*['*','-','-'],*/   ['*','-','*'],       ['*','-','/'],
    /*['*','*','+'],*/ /*['*','*','-'],*/ /*['*','*','*'],*/   /*['*','*','/'],*/
    /*['*','/','+'],*/ /*['*','/','-'],*/ /*['*','/','*'],*/   /*['*','/','/'],*/
          
    /*['/','+','+'],*/ /*['/','+','-'],*/ /*['/','+','*'],*/   /*['/','+','/'],*/ 
    /*['/','-','+'],*/ /*['/','-','-'],*/ /*['/','-','*'],*/   /*['/','-','/'],*/
    /*['/','*','+'],*/ /*['/','*','-'],*/ /*['/','*','*'],*/   /*['/','*','/'],*/
    /*['/','/','+'],*/ /*['/','/','-'],*/ /*['/','/','*'],*/   /*['/','/','/'],*/ 
  ]

  // 结合
  let o = {};
   o['+,*,+'] = function(a, b, c, d){return (a + b) * (c + d)};
   o['+,*,-'] = function(a, b, c, d){return (a + b) * (c - d)};
   o['-,*,+'] = function(a, b, c, d){return (a - b) * (c + d)};
   o['-,*,-'] = function(a, b, c, d){return (a - b) * (c - d)};
   o['*,+,*'] = function(a, b, c, d){return (a * b) + (c * d)};
  // o['*,+,/'] = function(a, b, c, d){return (a * b) + (c / d)}; // 跑过一次后发现没有
   o['*,-,*'] = function(a, b, c, d){return (a * b) - (c * d)};
   o['*,-,/'] = function(a, b, c, d){return (a * b) - (c / d)};
  // o['/,+,*'] = function(a, b, c, d){return (a / b) + (c * d)}; // 跑过一次后发现没有
  // o['/,-,*'] = function(a, b, c, d){return (a / b) - (c * d)}; // 跑过一次后发现没有

  // 单纯
  l1.forEach( n => {
    if (!!boolen) return ;
    l2.forEach( f => {
      if (!!boolen) return ;
      let expression = "(("+String(n[0])+f[0]+String(n[1])+")"+f[1]+String(n[2])+")"+f[2]+String(n[3]);
      let i = 0;
      let e = [toNumber(n[0]), toNumber(n[1]), toNumber(n[2]), toNumber(n[3])].reduce((pre, cur) => {
        i ++;
        return calc(f, i, pre, cur);
      });
      // console.log(expression +' : '+e);  
      if ( e / 24 === 1 && e % 24 < 0.000001 ) {boolen = expression;syAdd(f)}
    });
  });
  // 复合
  l1.forEach( n => {
    if (!!boolen) return ;
    l3.forEach( f => {
      if (!!boolen) return ;
      let expression = "(("+String(n[0])+f[0]+String(n[1])+")"+f[1]+String(n[2])+")"+f[2]+String(n[3]);
      let i = 0;
      let e = [toNumber(n[0]), toNumber(n[1]), toNumber(n[2]), toNumber(n[3])].reduce((pre, cur) => {
        i ++;
        return calc(f, i, pre, cur);
      });
      // console.log(expression +' : '+e);  
      if ( e / 24 === 1 && e % 24 < 0.000001 ) {boolen = expression;syAdd(f)}
    });
  });

  // 结合
  l1.forEach( n => {
    if (!!boolen) return ;
    l4.forEach( f => {
      if (!!boolen) return ;
      let expression = "("+String(n[0])+f[0]+String(n[1])+")"+f[1]+"("+String(n[2])+f[2]+String(n[3])+")";
      let e = o[f.join(',')].apply(null,[toNumber(n[0]), toNumber(n[1]), toNumber(n[2]), toNumber(n[3])]);
      // console.log(expression +' : '+e);  
      if ( e / 24 === 1 && e % 24 < 0.000001 ) {boolen = expression;syAdd(['('+f[0]+')',f[1],'('+f[2]+')'])}
    });
  });

  function calc(array, type, pre, cur){
    let t = array[ type - 1 ];
    if (t === '+' ) return pre + cur; 
    if (t === '-' ) return pre - cur; 
    if (t === '*' ) return pre * cur; 
    if (t === '/' ) return pre / cur; 
  }

  function toNumber(str){
    return Number(str.replace('A','').replace('B','').replace('C','').replace('D',''));
  }

  return boolen;
}